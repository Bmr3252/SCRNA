suppressPackageStartupMessages({
  #library(openxlsx)
  #library(DESeq2)
  library(ggplot2)
  #library(ComplexHeatmap)
  library(dplyr)
  #library(FactoMineR)
  #library(factoextra)
  #library(apeglm)
  library(Seurat)
  library(patchwork)
  #library(circlize)
  library(enrichplot)# for visualisations
  #library(slingshot)
  library(tidyverse)
  #library(hrbrthemes)
  #library(viridis)
  #library(networkD3)
  #library(nichenetr)
  #library(singleCellHaystack)
  #library(scriabin)
  #library(loomR)
  #library(sf)
  #library(msigdbr)
  #library(scales)
  #library(survival)
  #library(survminer)})
  library(harmony)
  library(sctransform)
  library(RColorBrewer) # for a colourful plot
  library(pheatmap)
  library(ggupset) # for visualisations
  library(data.table)
  #library(sva)
  
  library(clusterProfiler)
  library(data.table)
  library(easybio)
  library(clustermole)
  library(GSEABase)
  library(GSVA)
  library(singscore)
  library("fgsea")
  library(ggrepel)
  library(cowplot)
  library(edgeR)
  library(Matrix)
  library(reshape2)
  library(S4Vectors)
  library(SingleCellExperiment)
  library(pheatmap)
  #library(apeglm)
  library(png)
  library(DESeq2)
  library(RColorBrewer)
  library(data.table)
  library(Seurat)
  library(tidyverse)
  library(dplyr)
  library(cowplot)
  #library(monocle)
  library(shiny)
  #
  #library(cols4all)
})
library(monocle3)
library(dplyr)
library(SeuratWrappers)
library(ggplot2)

macrophage_cells=readRDS("C:/Users/65881/Downloads/FYP/aft 2 sub/macro")
colnames(macrophage_cells@meta.data)[colnames(macrophage_cells@meta.data) == "SCT_snn_res.0.2"] <- "_cluster_names"
#macrophage_cells<-readRDS("C:/Users/65881/Downloads/FYP/aft 2 sub/SPP1_IL1B")
# Step 1: Access the Seurat object's metadata to identify the clusters
cluster <- macrophage_cells@meta.data$cluster_names  # This column contains cluster assignments
#data <-macrophage_cells@assays$RNA@layers$counts
data <-GetAssayData(macrophage_cells)[VariableFeatures(macrophage_cells),]
pd <- data.frame(macrophage_cells@meta.data)
f_data = data.frame(gene_short_name = row.names(data), row.names = row.names(data))


#https://github.com/kpatel427/YouTubeTutorials/blob/main/TI_monocle3.R

cds <- new_cell_data_set(expression_data = data,
                         cell_metadata = pd,
                         gene_metadata = f_data)

# assign paritions
reacreate.partition <- c(rep(1,length(cds@colData@rownames)))
names(reacreate.partition) <- cds@colData@rownames
reacreate.partition <- as.factor(reacreate.partition)
cds@clusters$UMAP$partitions <- reacreate.partition



#cds <- preprocess_cds(cds, num_dim = 12)
#plot_pc_variance_explained(cds)
#cds <- reduce_dimension(cds,
#                        preprocess_method = "PCA",
#                        reduction_method= "UMAP",
#                        verbose = T)
#cds <- cluster_cells(cds = cds , reduction_method = "UMAP", verbose = TRUE,
#                     resolution = NULL)



# Assign the cluster info 
list_cluster <- macrophage_cells@active.ident
cds@clusters$UMAP$clusters <- list_cluster

# Assign UMAP coordinate - cell embeddings
cds@int_colData@listData$reducedDims$UMAP <- macrophage_cells@reductions$umap@cell.embeddings



## Step 5: Learn a graph
cds <- learn_graph(cds, use_partition = FALSE)
plot_cells(cds,
           color_cells_by = "X_cluster_names",
           label_groups_by_cluster=FALSE,label_roots = FALSE,
           label_leaves=TRUE,
           label_branch_points=TRUE,group_label_size = 5,cell_size = 8)

plot_cells(cds, color_cells_by = "partition")

# plot
cluster.before.trajectory <- plot_cells(cds,
                                        color_cells_by = 'X_cluster_names',
                                        label_groups_by_cluster = FALSE,
                                        group_label_size = 5) +
  theme(legend.position = "right")

cluster.names <- plot_cells(cds,
                            color_cells_by = "X_cluster_names",
                            label_groups_by_cluster = FALSE,
                            group_label_size = 5) +
  scale_color_manual(values = c('red', 'blue', 'green', 'maroon', 'yellow', 'grey', 'cyan','black')) +
  theme(legend.position = "right")

cluster.before.trajectory | cluster.names



## Step 6: Order cells
cds <- order_cells(cds,reduction_method = 'UMAP')

plot_cells(cds,
           color_cells_by = "pseudotime",
           label_cell_groups=FALSE,
           label_leaves=FALSE,
           label_branch_points=FALSE,cell_size=8,
           show_trajectory_graph = TRUE,
           group_label_size = 10,
           graph_label_size = 8)

# cells ordered by monocle3 pseudotime
pseudotime(cds)
cds$monocle3_pseudotime <- pseudotime(cds)
data.pseudo <- as.data.frame(colData(cds))
ggplot(data.pseudo, aes(monocle3_pseudotime, reorder(X_cluster_names, monocle3_pseudotime, median), fill = X_cluster_names)) +
  geom_boxplot()

# dunno whether need>>>>https://github.com/mousepixels/sanbomics_scripts/blob/main/monocle3_tutorial.Rmd
#gene expresssion as function of pseudotime check vignette
cds_pt_res<-graph_test(cds,neighbor_graph = c("knn", "principal_graph"),cores=8)
cds_pt_res <- na.omit(cds_pt_res)
cds_pt_res <- cds_pt_res[cds_pt_res$p_value < 0.05 & cds_pt_res$status == "OK", ]
cds_pt_res
cds_pt_res[order(-cds_pt_res$morans_test_statistic),]
#SPP1
plot_cells(cds,genes=c("APOE","APOC1","CTSD"),show_trajectory_graph = FALSE,label_cell_groups = FALSE,label_leaves=FALSE)
cds_subset_spp1 <- cds[rowData(cds)$gene_short_name %in% c("APOE","APOC1","CTSD")]
plot_genes_in_pseudotime(cds_subset_spp1,
                         color_cells_by="X_cluster_names",
                         min_expr=0.5)
#IL1B
plot_cells(cds,genes=c("IL1B","CCL3","CCL4","IER3","CXCL4"),show_trajectory_graph = FALSE,label_cell_groups = FALSE,label_leaves=FALSE)
plot_cells(cds,genes=c("IL1B","CCL3","CCL4","IER3","CXCL4"),show_trajectory_graph = FALSE,label_cell_groups = FALSE,label_leaves=FALSE)
cds_subset_il1b <- cds[rowData(cds)$gene_short_name %in% c("IL1B","CCL3","CCL4","IER3","CXCL4")]
plot_genes_in_pseudotime(cds_subset_il1b,
                         color_cells_by="X_cluster_names",
                         min_expr=0.5)



#-----------------------------------------------------
#-------------------------------------------------
cds_subset<-choose_cells(cds) 

cds_subset
cds_subset <- reduce_dimension(cds_subset, reduction_method = "UMAP")

# Learn the graph structure (e.g., principal graph)
cds_subset <- learn_graph(cds_subset)


cds_subset_pt_res<-graph_test(cds_subset,neighbor_graph = c("knn", "principal_graph"),cores=8)
cds_subset_pt_res <- na.omit(cds_subset_pt_res)
cds_subset_pt_res <- cds_subset_pt_res[cds_subset_pt_res$p_value < 0.05 & cds_subset_pt_res$status == "OK", ]
cds_subset_pt_res

#---
# Check the column names
colnames(data.pseudo)

# Check the first few rows of your dataframe
head(data.pseudo)

# Check for missing values or mismatched lengths
length(data.pseudo$monocle3_pseudotime)
length(data.pseudo$cluster)


------------------------------------------------------------------
#----------------------------------------------

cds <- learn_graph(cds)
plot_cells(cds,
           color_cells_by = "cell.type",
           label_groups_by_cluster=FALSE,
           label_leaves=FALSE,
           label_branch_points=FALSE)




#compare with seurat data, res = 0.5
cds@clusters$umap$clusters <- PG_all$RNA_snn_res.0.5
p2 <- plot_cells(cds, reduction_method = "umap")
p1 + p2

# learn graph
cds <- reduce_dimension(cds,
                        reduction_method= "UMAP",
                        verbose = T)
cds <- cluster_cells(cds = cds , reduction_method = "UMAP", verbose = TRUE)
plot_cells(cds, reduction_method = "UMAP", show_trajectory_graph = FALSE, group_label_size = 5)
cds <- learn_graph(cds, use_partition = TRUE)


#----------------------------------------
macrophage_cells<-readRDS("C:/Users/65881/Downloads/FYP/aft 2 sub/SPP1_IL1B")
# Step 1: Access the Seurat object's metadata to identify the clusters
cluster_column <- macrophage_cells@meta.data$cluster_names  # This column contains cluster assignments
data <-macrophage_cells@assays$RNA@layers$counts
pd <- data.frame(macrophage_cells@meta.data)
gene_names <- rownames(macrophage_cells@assays$RNA)
rownames(data) <- gene_names

row.names(data) <- gene_names
data <- as.matrix(data)

cds <- new_cell_data_set(data,
                         cell_metadata = pd,
                         gene_metadata <- data.frame(gene_names))

class(data)
class(pd)
class(gene_names)



cds <- preprocess_cds(cds, num_dim = 50)
cds <- align_cds(cds, alignment_group = "batch", residual_model_formula_str = "~ bg.300.loading + bg.400.loading + bg.500.1.loading + bg.500.2.loading + bg.r17.loading + bg.b01.loading + bg.b02.loading")
